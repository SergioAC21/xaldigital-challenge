from urllib import request
import pandas as pd 
import requests
import json


if __name__ == "__main__":

	dat = requests.get("https://api.stackexchange.com/2.2/search?order=desc&sort=activity&intitle=perl&site=stackoverflow")
	data = dat.json()	

	Is_answered = []
	Owner = []
	Views = []
	Activity_date = []
	Link =[]	
	
	for i in data["items"]:
	    Is_answered.append(i['is_answered'])
	    Owner.append(i['owner']['reputation'])
	    Views.append(i['view_count'])
	    Activity_date.append(i['last_activity_date'])
	    Link.append(i['link'])	
		
	data_dict = {
	    'Is_answered' : Is_answered,
	    'Views' : Views,
	    'Activity_date' : Activity_date,
	    'Link' : Link
	    }	
	
	df = pd.DataFrame(data_dict, columns = ["Is_answered" , "Views", "Activity_date", "Link"])	

	df_ower = pd.DataFrame(Owner, columns=["Owner"] )	

	df_resultado = pd.concat([df, df_ower], axis=1)	
	
	Trues = df_resultado['Is_answered'].value_counts()
	print("El numero de respuestas contestadas es: ", Trues[1], '\n')
	print("El numero de respuestas no contestadas es: ", Trues[0], '\n')

	Mayor_owner = df_resultado.loc[df_resultado["Owner"].idxmax()]
	print("El owner con mayor puntuacion que son %s puntos y es: " %Mayor_owner[4], Mayor_owner[3], '\n')

	Min_views = df_resultado.loc[df_resultado["Views"].idxmin()]
	print("La respuesta con menor numero de vistas tiene %s y es: " '\n' %Min_views[1], Min_views[3], '\n')
    
	newer_answ = df_resultado.loc[df_resultado["Activity_date"].idxmin()]
	older_answ = df_resultado.loc[df_resultado["Activity_date"].idxmax()]
	print("La respuesta más vieja  es: " + '\n',  older_answ[3], '\n')
	print("La respuesta más actual es: " + '\n', newer_answ[3], '\n')

    










